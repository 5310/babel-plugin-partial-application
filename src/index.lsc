PACKAGE_NAME = 'babel-plugin-partial-application'
DEFAULT_PLACEHOLDER = '_'
ALTERNATE_PLACEHOLDER = '__'
POSITIONALS = ['0', '1', '2', '3', '4', '5', '6' , '7', '8', '9']

makeIdentifierError (path, current) ->
  path.buildCodeFrameError(
    `Cannot use placeholder as an identifier.\n
     If you need to use '${current}' as a variable name:
     - set 'options.placeholder' to a different custom token
     - set 'options.useAlternatePlaceholder' for '__'
       ( a double underscore )\n
    See https://github.com/citycide/${PACKAGE_NAME}#caveats--limitations
    for more information.\n`
  )

makeDefaultArgError (path) ->
  path.buildCodeFrameError(
    'Default parameters are only supported in argument lists.'
  )

module.exports = ({ types: t }) ->
  hash = new Map()

  getPlaceholder (state) ->
    {
      file: { opts: { filename } },
      opts: { useAlternatePlaceholder }
    } = state

    let placeholder =
      hash.get(filename) or
      state.opts.placeholder or
      DEFAULT_PLACEHOLDER

    if placeholder == DEFAULT_PLACEHOLDER and useAlternatePlaceholder:
      now placeholder = ALTERNATE_PLACEHOLDER

    kind = typeof placeholder
    if kind != 'string':
      throw new TypeError(
        'Expected a string for `options.placeholder` ' +
        `and got ${kind}`
      )

    hash.set(filename, placeholder)
    placeholder

  setPlaceholder (state, token) ->
    if typeof token == 'string':
      hash.set(state.file.opts.filename, token)

  getUniqueName (path, name = 'a') ->
    path.scope.generateUidIdentifier(name)

  toNode (pathOrNode) ->
    pathOrNode?.node or pathOrNode

  isPlaceholder (target, placeholder) ->
    t.isIdentifier(target~toNode(), { name: placeholder })

  isSpreadPlaceholder (target, placeholder) ->
    node = target~toNode()
    t.isSpreadElement(node) and
    node.argument~isPlaceholder(placeholder)

  isPositionalPlaceholder(target, placeholder) ->
    { tag, quasi } = target~toNode()
    tag~isPlaceholder(placeholder) and
    POSITIONALS.indexOf(quasi.quasis[0]?.value?.raw) > -1

  hasPlaceholders (nodes, placeholder) ->
    for elem target in nodes:
      node = target~toNode()
      if (
        node~isPlaceholder(placeholder) or
        node~isPositionalPlaceholder(placeholder)
      ): return true

    false

  isPartialCaller (target, placeholder) ->
    node = target~toNode()
    t.isCallExpression(node) and
    node.arguments~hasPlaceholders(placeholder)

  isPluginRequire (node) ->
    { callee, arguments: args } = node

    isRequire =
      t.isIdentifier(callee, { name: 'require' }) or (
        t.isMemberExpression(callee) and
        t.isIdentifier(callee.object, { name: 'require' })
      )

    isRequire and t.isStringLiteral(args[0], { value: PACKAGE_NAME })

  pullPathLink (path) ->
    if path.isMemberExpression(): path.get('object')
    else if path.isCallExpression(): path.get('callee.object')

  shouldHoist (target, placeholder) ->
    node = target~toNode()

    if t.isTaggedTemplateExpression(node):
      return !node~isPositionalPlaceholder(placeholder)

    if t.isCallExpression(node):
      return !node.callee?.object?.wasPlaceholder

    if t.isMemberExpression(node):
      return !node.object.wasPlaceholder

    !t.isLiteral(node) and [
      'Identifier'
      'SpreadElement'
      'FunctionExpression'
      'ArrowFunctionExpression'
    ].every(type => type != node.type)

  makeWrapperFunction (params, returnValue) ->
    props = {
      positionals: { value: {} },
      isWrapper: { value: true }
    }

    t.arrowFunctionExpression(
      params,
      t.blockStatement([
        t.returnStatement(returnValue)
      ])
    )~Object.defineProperties(props)

  findTopmostLink (path) ->
    let tail = path
    while tail.parentPath:
      parent = tail.parentPath
      isCalleeTail =
        parent.isCallExpression() and
        parent.get('callee') == tail
      hasChainedParent =
        parent.isMemberExpression() or
        parent.isBinaryExpression() or
        isCalleeTail

      if !hasChainedParent: break
      now tail = tail.parentPath

    tail

  findDeepestLink (path, { predicate, fn } = {}) ->
    now predicate = predicate or pullPathLink
    now fn = fn or predicate

    let link = path
    while predicate(link):
      now link = fn(link)

    link

  checkImports (path, state) ->
    placeholder = state~getPlaceholder()
    { node: { specifiers, source } } = path
    if source.value == PACKAGE_NAME and specifiers.length:
      state~setPlaceholder(specifiers[0].local.name)
      return path.remove()

    for elem specifier in specifiers:
      if specifier.local.name == placeholder:
        throw makeIdentifierError(path, placeholder)

  checkDeclarations (path, state) ->
    placeholder = state~getPlaceholder()
    for elem { init, id } in path.node.declarations:
      if init and init~isPluginRequire() and t.isIdentifier(id):
        state~setPlaceholder(id.name)
        return path.remove()

      if id.name == placeholder:
        throw path~makeIdentifierError(placeholder)
        
  getPlaceholderPosition (path) ->
    Number(path.node.quasi.quasis[0].value.raw)

  parsePosition (node, fallback = 99) ->
    result = Number(node.position)
    Number.isNaN(result) ? fallback : result

  sortByPlaceholderPosition (a, b) ->
    parsePosition(a) > parsePosition(b)

  appliedChildVisitor = {
    CallExpression (childPath): void ->
      childPath.skip()

    Identifier (childPath): void ->
      { parent, node: { defaultParameter } } = childPath

      if (
        childPath.key == 'property' or
        !childPath~isPlaceholder(this.placeholder) or
        parent~isPositionalPlaceholder(this.placeholder)
      ): return

      let name = 'arg'
      if t.isMemberExpression(parent):
        now name = 'obj'
        parent.wasPlaceholder = true

      id = childPath~getUniqueName(name)
      id.wasPlaceholder = true
      if defaultParameter:
        t.assignmentPattern(id, defaultParameter)
          ~this.fn.params.push()
      else:
        this.fn.params.push(id)

      childPath.replaceWith(id)

    TaggedTemplateExpression (childPath): void ->
      if !childPath.node~isPositionalPlaceholder(this.placeholder):
        return

      position = childPath~getPlaceholderPosition()
      current = this.fn.positionals[position]
      id = current or childPath~getUniqueName('pos')
      id.position = position

      if !current:
        this.fn.params.push(id)
        this.fn.positionals[position] = id

      this.fn.params.sort(sortByPlaceholderPosition)
      childPath.replaceWith(id)
      childPath.skip()

    SpreadElement (childPath): void ->
      { node: { argument } } = childPath

      if !argument~isPlaceholder(this.placeholder): return

      id = childPath~getUniqueName('spr')
      this.fn.params.push(t.restElement(id))
      childPath.replaceWith(t.spreadElement(id))
  }

  binaryChildVisitor = {
    TaggedTemplateExpression (childPath): void ->
      if !childPath.node~isPositionalPlaceholder(this.placeholder):
        return

      position = childPath~getPlaceholderPosition()
      current = this.tail.node.positionals[position]
      id = current or childPath~getUniqueName('pos')
      id.position = position

      if !current:
        this.tail.node.params.push(id)
        this.tail.node.positionals[position] = id

      this.tail.node.params.sort(sortByPlaceholderPosition)
      childPath.replaceWith(id)
      childPath.skip()

    Identifier (childPath): void ->
      if (
        !childPath.node~isPlaceholder(this.placeholder) or
        childPath.key == 'property'
      ): return

      id = childPath~getUniqueName('bin')
      this.tail.node.params.push(id)
      childPath.replaceWith(id)
  }

  templateLiteralVisitor = {
    TaggedTemplateExpression (childPath): void ->
      if !childPath.node~isPositionalPlaceholder(this.placeholder):
        return

      position = childPath~getPlaceholderPosition()
      let wrapper = childPath.findParent(p =>
        t.isArrowFunctionExpression(p) and p.node.isWrapper
      )

      if !wrapper:
        fn = makeWrapperFunction([], this.path.node)
        this.path.replaceWith(fn)
        // this is pretty hacky...
        now wrapper = { node: fn }

      current = wrapper.node.positionals[position]
      id = current or childPath~getUniqueName('pos')
      id.position = position

      if !current:
        wrapper.node.params.push(id)
        wrapper.node.positionals[position] = id

      wrapper.node.params.sort(sortByPlaceholderPosition)
      childPath.replaceWith(id)
      childPath.skip()

    Identifier (childPath): void ->
      if !childPath.node~isPlaceholder(this.placeholder):
        return

      if childPath.key == 'property': return

      id = childPath~getUniqueName('exp')
      childPath.replaceWith(id)

      if t.isArrowFunctionExpression(this.path):
        this.path.node.params.push(id)
        return

      makeWrapperFunction([id], this.path.node)
        ~this.path.replaceWith()

      this.path.stop()
  }

  assignmentVisitor = {
    AssignmentExpression (childPath) ->
      { node: { left, right }, listKey } = childPath

      if left~isPlaceholder(this.placeholder):
        if listKey != 'arguments':
          throw makeDefaultArgError(childPath)

        left.defaultParameter = right
        childPath.replaceWith(left)
        return

      links = []
      let link = left
      while link.object:
        links.push(link.property)
        now link = link.object

      if link~isPlaceholder(this.placeholder):
        if listKey != 'arguments':
          throw makeDefaultArgError(childPath)

        link._meta = { links, right }
        childPath.replaceWith(left)
  }

  return {
    visitor: {
      Program (path, state) ->
        placeholder = state~getPlaceholder()
        path.traverse(assignmentVisitor, { placeholder })

      ImportDeclaration (path, state) ->
        path~checkImports(state)

      VariableDeclaration (path, state) ->
        path~checkDeclarations(state)

      CallExpression (path, state) ->
        placeholder = state~getPlaceholder()
        args = path.get('arguments')

        if !args.length or !args~hasPlaceholders(placeholder):
          return

        fn = makeWrapperFunction([], path.node)
        path.traverse(appliedChildVisitor, { fn, placeholder })

        for elem arg in args:
          hoist = arg.node~shouldHoist(placeholder)
          if hoist and !arg.node~isPartialCaller(placeholder):
            id = path~getUniqueName('ref')
            ref = t.variableDeclaration('const', [
              t.variableDeclarator(id, arg.node)
            ])

            parent = path.getStatementParent()
            parent.insertBefore(ref)
            arg.replaceWith(id)

        path.replaceWith(fn)

      MemberExpression (path, state) ->
        placeholder = state~getPlaceholder()
        object = path.get('object')
        { node } = object

        if !node~isPlaceholder(placeholder):
          return

        last = node._meta?.links?[0]
        param = node._meta?.right
        let pattern
        if last:
          name = path~getUniqueName('arg')
          now pattern = t.objectPattern([
            t.objectProperty(
              last,
              t.assignmentExpression('=', name, param)
            )
          ])

          if node._meta.links.length > 1:
            for idx i, elem link in node._meta.links:
              if i == 0: continue
              now pattern = t.objectPattern([
                t.objectProperty(link, pattern)
              ])

          top = path~findTopmostLink()
          if top.parentPath.container:
            makeWrapperFunction([pattern], top.parent)
              ~top.parentPath.replaceWith()
          else:
            top.parent.params.push(pattern)

          top.replaceWith(name)
          return

        binaryParent = path.findParent(p => t.isBinaryExpression(p))
        ids = [path~getUniqueName('obj')]

        if binaryParent:
          right = binaryParent.get('right')
          if !right.node~isPlaceholder(placeholder):
            target = right~findDeepestLink()
            if target?.node~isPlaceholder(placeholder):
              id = path~getUniqueName('obj')
              ids.push(id)
              target.replaceWith(id)

        object.replaceWith(ids[0])

        tail = path~findTopmostLink()
        if tail.container:
          makeWrapperFunction(ids, tail.node)
            ~tail.replaceWith()
        else:
          for elem id in ids:
            tail.parent.params.push(id)

      SpreadElement (path, state) ->
        placeholder = state~getPlaceholder()
        { parent, parentPath } = path
        argument = path.get('argument')

        if !argument~isPlaceholder(placeholder): return

        if path.listKey != 'arguments':
          throw path.parentPath.buildCodeFrameError(
            'Placeholder spread is only supported as a function argument.'
          )

        wrapper = path.findParent(p =>
          t.isArrowFunctionExpression(p) and p.node.isWrapper
        )

        makeSpreadIdentifier () -> path~getUniqueName('spr')

        if wrapper:
          if !path.container: return

          id = makeSpreadIdentifier()
          wrapper.node.params.push(t.restElement(id))
          path.replaceWith(t.spreadElement(id))
        else if path.container:
          id = makeSpreadIdentifier()
          path.replaceWith(t.spreadElement(id))
          makeWrapperFunction([t.restElement(id)], parent)
            ~parentPath.replaceWith()
        else:
          id = makeSpreadIdentifier()
          parent.params.push(t.restElement(id))
          argument.replaceWith(id)

        parentPath.stop()

      BinaryExpression (path, state) ->
        placeholder = state~getPlaceholder()

        nodes = [path.get('left'), path.get('right')].filter(v =>
          v~isPlaceholder(placeholder) or
          v~isPositionalPlaceholder(placeholder) or
          v~findDeepestLink()~isPositionalPlaceholder(placeholder)
        )

        if !nodes.length: return

        let tail = path
        while tail.parentPath.isBinaryExpression():
          now tail = tail.parentPath

        if tail.container:
          makeWrapperFunction([], t.toExpression(tail.node))
            ~tail.replaceWith()
        else:
          now tail = tail.parentPath

        tail.traverse(binaryChildVisitor, { tail, placeholder })
        tail.stop()

      TemplateLiteral (path, state) ->
        placeholder = state~getPlaceholder()
        path.traverse(templateLiteralVisitor, { path, placeholder })

      TaggedTemplateExpression (path, state) ->
        { parentPath } = path
        placeholder = state~getPlaceholder()
        if !path~isPositionalPlaceholder(placeholder): return

        if (
          parentPath.isVariableDeclarator() or
          parentPath.isExpressionStatement()
        ):
          throw path.buildCodeFrameError(
            'Positional placeholders must be part of some expression.'
          )

        wasTransformed = t.isReturnStatement(parentPath.parent)

        let fn, current
        if wasTransformed:
          now fn = path.findParent(p => t.isArrowFunctionExpression(p))
          now current = fn.node.positionals[position]

        position = path~getPlaceholderPosition()
        id = current or path~getUniqueName('pos')
        id.position = position

        if !wasTransformed:
          let target = path~findTopmostLink()
          if target == path: now target = parentPath

          wrapper = makeWrapperFunction([id], target.node)
          wrapper.positionals[position] = id

          if target.container:
            target.replaceWith(wrapper)
          else:
            target.parent.params.push(id)
            target.parent.params.sort(sortByPlaceholderPosition)
        else:
          if !current: fn.node.params.push(id)
          fn.node.params.sort(sortByPlaceholderPosition)

        path.replaceWith(id)
    }
  }
